version: "3.9"
services:
  trak:
    container_name: trak
    restart: unless-stopped
    image: haztrak-server
    build:
      context: ./server
    ports:
      - "8000:8000"
    volumes:
      - ./server:/app
    environment:
      DJANGO_SETTINGS_MODULE: "haztrak.settings.dev"
      HT_HOST: "localhost"
      HT_SECRET_KEY: ${HT_SECRET_KEY}
      HT_DEBUG: ${HT_DEBUG}
      HT_LOG_LEVEL: ${HT_LOG_LEVEL}
      HT_TIMEZONE: ${HT_TIMEZONE}
      HT_RCRAINFO_ENV: ${HT_RCRAINFO_ENV}
      HT_CORS_DOMAIN: ${HT_CORS_DOMAIN}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
      HT_CACHE_URL: ${HT_CACHE_URL}
      HT_DB_ENGINE: ${HT_DB_ENGINE}
      HT_DB_NAME: ${HT_DB_NAME}
      HT_DB_USER: ${HT_DB_USER}
      HT_DB_PASSWORD: ${HT_DB_PASSWORD}
      HT_DB_HOST: db
      HT_DB_PORT: ${HT_DB_PORT}
    command: |
      sh -c "
      python manage.py makemigrations &&
      python manage.py migrate &&
      python manage.py loaddata dev_data.yaml org_permissions.yaml &&
      python manage.py runserver 0.0.0.0:8000"
    healthcheck:
      test:
        ["CMD", "curl", "-f", "http://localhost:8000/api/health/startup-probe/"]
      interval: 30s
      timeout: 20s
      retries: 5
      start_period: 10s
    depends_on:
      db:
        condition: service_healthy

  redis:
    container_name: redis
    image: "redis:alpine"
    ports:
      - "6379:6379"
    volumes:
      - imdb:/data

  celery-worker:
    restart: unless-stopped
    container_name: celery-worker
    image: haztrak-server
    volumes:
      - ./server:/app
    environment:
      DJANGO_SETTINGS_MODULE: "haztrak.settings.dev"
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
      CELERY_LOG_LEVEL: ${CELERY_LOG_LEVEL}
      HT_RCRAINFO_ENV: ${HT_RCRAINFO_ENV}
      HT_DB_ENGINE: ${HT_DB_ENGINE}
      HT_DB_NAME: ${HT_DB_NAME}
      HT_DB_USER: ${HT_DB_USER}
      HT_DB_PASSWORD: ${HT_DB_PASSWORD}
      HT_DB_HOST: db
      HT_DB_PORT: ${HT_DB_PORT}
    command: python manage.py celery_worker
    depends_on:
      trak:
        condition: service_healthy

  celery-beat:
    restart: unless-stopped
    container_name: celery-beat
    image: haztrak-server
    volumes:
      - ./server:/app
    environment:
      DJANGO_SETTINGS_MODULE: "haztrak.settings.dev"
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
      CELERY_LOG_LEVEL: ${CELERY_LOG_LEVEL}
      HT_RCRAINFO_ENV: ${HT_RCRAINFO_ENV}
      HT_DB_ENGINE: ${HT_DB_ENGINE}
      HT_DB_NAME: ${HT_DB_NAME}
      HT_DB_USER: ${HT_DB_USER}
      HT_DB_PASSWORD: ${HT_DB_PASSWORD}
      HT_DB_HOST: db
      HT_DB_PORT: ${HT_DB_PORT}
    command: python manage.py celery_beat
    depends_on:
      trak:
        condition: service_healthy

  db:
    restart: unless-stopped
    container_name: db
    image: "postgres:16"
    environment:
      POSTGRES_DB: ${HT_DB_NAME}
      POSTGRES_USER: ${HT_DB_USER}
      POSTGRES_PASSWORD: ${HT_DB_PASSWORD}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $HT_DB_USER -d $HT_DB_NAME"]
      interval: 3s
      timeout: 3s
      retries: 5
    volumes:
      - rdb:/var/lib/postgresql/data

  client:
    container_name: ht-client
    build:
      context: ./client
      target: dev
    ports:
      - "3000:3000"
    volumes:
      - ./client:/app
    environment:
      VITE_HT_API_URL: ${VITE_HT_API_URL}
      VITE_HT_ENV: ${VITE_HT_ENV}
      VITE_GITHUB_URL: ${VITE_GITHUB_URL}
    command: sh -c "cd /app; npm install; npm start"

volumes:
  rdb:
  imdb:
