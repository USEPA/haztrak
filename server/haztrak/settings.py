"""
Django settings for haztrak project.

Generated by 'django-admin startproject' using Django 4.0.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import logging
import os
from pathlib import Path

from dotenv import load_dotenv

ht_host = "HT_HOST"
ht_debug = "HT_DEBUG"
ht_secret = "HT_SECRET_KEY"
ht_timezone = "HT_TIMEZONE"
ht_test_db_name = 'HT_TEST_DB_NAME'
ht_cors_domain = 'HT_CORS_DOMAIN'

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

load_dotenv()

# SECURITY WARNING: keep the secret key used in production secret!
if os.getenv(ht_secret):
    SECRET_KEY = os.getenv(ht_secret)
else:
    logging.fatal('environment HT_SECRET_KEY not found, exiting')
    exit(1)

# SECURITY WARNING: don't run with debug turned on in production!
if os.getenv(ht_debug):
    if os.getenv(ht_debug).upper() == 'TRUE':
        DEBUG = True
else:
    DEBUG = False

if os.getenv(ht_host):
    ALLOWED_HOSTS = [str(os.getenv(ht_host))]
    # if type(ALLOWED_HOSTS) is str:
    #     ALLOWED_HOSTS = [ALLOWED_HOSTS]
else:
    ALLOWED_HOSTS = ['localhost']

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'apps.trak',
    'apps.home',
    'apps.accounts',
    # 'apps.api',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

APPEND_SLASH = True

CORS_ALLOW_CREDENTIALS = True

CORS_ORIGIN_WHITELIST = [
    str(os.getenv(ht_cors_domain))
]
if os.getenv(ht_cors_domain):
    CORS_ORIGIN_WHITELIST = [str(os.getenv(ht_cors_domain))]
else:
    CORS_ORIGIN_WHITELIST = ['http://localhost:3000']

ROOT_URLCONF = 'haztrak.urls'

# FRONTEND_DIR = BASE_DIR / 'haztrak-client'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # 'DIRS': [os.path.join(FRONTEND_DIR, "build")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'haztrak.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

if os.getenv('HT_DB_NAME'):
    required_env_vars = [
        'HT_DB_ENGINE',
        'HT_DB_NAME',
        'HT_DB_USER',
        'HT_DB_PASSWORD',
        'HT_DB_HOST',
        'HT_DB_PORT',
    ]
    for i in required_env_vars:
        if not os.getenv(i):
            logging.error(f'missing required DB environment variable {i}')
            exit(1)
    if not os.getenv(ht_test_db_name):
        os.environ['test'] = 'test'
    default_db = {
        'ENGINE': os.getenv('HT_DB_ENGINE'),
        'NAME': os.getenv('HT_DB_NAME'),
        'USER': os.getenv('HT_DB_USER'),
        'PASSWORD': os.getenv('HT_DB_PASSWORD'),
        'HOST': os.getenv('HT_DB_HOST'),
        'PORT': os.getenv('HT_DB_PORT'),
        'TEST': {
            'NAME': os.getenv(ht_test_db_name)
        }
    }
else:
    logging.info('Resorting to sqlite server')
    default_db = {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
        'TEST': {
            'NAME': BASE_DIR / 'test_db.sqlite3',
        }
    }

DATABASES = {
    'default': default_db
}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation'
                '.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = os.getenv(ht_timezone, 'UTC')

USE_I18N = False

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    # os.path.join(BASE_DIR, 'static'),
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

FIXTURE_DIRS = ['tests/fixtures']

# RCRAInfo environment
if not os.getenv('RCRAINFO_ENV'):
    os.environ['RCRAINFO_ENV'] = 'preprod'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'haztrak.authentication.BearerAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    )
}
